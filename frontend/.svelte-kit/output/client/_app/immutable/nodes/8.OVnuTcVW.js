import{s as V,a as $,e as m,h as z,d as l,c as y,f as h,k as S,j as g,i as c,g as H,l as w,n as D}from"../chunks/scheduler.DrQRk8ea.js";import{S as E,i as L,c as _,a as b,m as k,t as q,b as C,d as I}from"../chunks/index.CcdvbsEI.js";import{C as R}from"../chunks/Container.CWcU-xxO.js";import{I as T}from"../chunks/InstallNgit.CMlOboZc.js";function j(v){let t,s,o="Quick Start",d,a,u="pre-requesite: install ngit and git-remote-nostr",r,n,p;return n=new T({}),{c(){t=m("div"),s=m("h2"),s.textContent=o,d=$(),a=m("h4"),a.textContent=u,r=$(),_(n.$$.fragment),this.h()},l(e){t=h(e,"DIV",{class:!0});var i=S(t);s=h(i,"H2",{"data-svelte-h":!0}),H(s)!=="svelte-7tv6tr"&&(s.textContent=o),d=y(i),a=h(i,"H4",{id:!0,"data-svelte-h":!0}),H(a)!=="svelte-1tiurs4"&&(a.textContent=u),r=y(i),b(n.$$.fragment,i),i.forEach(l),this.h()},h(){g(a,"id","prereq"),g(t,"class","prose m-auto mt-8")},m(e,i){c(e,t,i),w(t,s),w(t,d),w(t,a),w(t,r),k(n,t,null),p=!0},p:D,i(e){p||(q(n.$$.fragment,e),p=!0)},o(e){C(n.$$.fragment,e),p=!1},d(e){e&&l(t),I(n)}}}function O(v){let t,s=`<h3 id="contributor">Contributor Quick Start</h3> <div class="text-sm"><div><div class="prose"><p>pre-requesite: <a href="#prereq">install</a> ngit and git-remote-nostr</p> <h4>1. find repository</h4> <ul><li>browse <a href="/repos" class="link link-primary">gitworkshop.dev/repos</a> for the repository</li> <li>explore proposals and issues</li> <li>copy the git clone url (or press the green clone button to copy
                the clone command)</li></ul> <h4>2. clone repository</h4> <ul><li><div>using your prefered git client or with the git command you
                  just copied:</div> <div class="not-prose text-sm"><code><span class="text-yellow-600">git</span> clone nostr://<span class="text-purple-600">npub123</span>/<span class="text-primary">repo-identifier</span></code></div></li></ul> <h4>3. submit proposal</h4> <div><ul><li><div><div>push a branch with the prefix \`pr/\` for example using git
                      commands:</div> <div class="not-prose text-sm"><div><code><span class="text-yellow-600">git</span> checkout -b pr/great-feature</code></div> <div><code><span class="text-yellow-600">git</span> commit -am &quot;improve
                          the world&quot;</code></div> <div><code><span class="text-yellow-600">git</span> push -u</code></div></div></div></li> <li><div><div>OR for more options such as including a cover letter use
                      ngit:</div> <div class="not-prose text-sm"><div><code><span class="text-purple-600">ngit</span> send</code></div></div></div></li></ul></div> <h4>4. view proposals</h4> <div><ul><li><div><div>for open proposals view remote branches with prefix \`pr/\`
                      for example using git command:</div> <div class="not-prose text-sm"><div><code><span class="text-yellow-600">git</span> branch -r --list
                          origin/pr/*</code></div></div></div></li> <li><div><div>OR using ngit:</div> <div class="not-prose text-sm"><div><code><span class="text-purple-600">ngit</span> list</code></div></div></div></li></ul></div> <h4>5. update proposal</h4> <div><ul><li><div><div>if you are the proposal author, or a maintainer you can
                      add commits to a proposal:</div> <div class="not-prose text-sm"><div><code><span class="text-yellow-600">git</span> commit -am &quot;extra
                          thing&quot;</code></div></div> <div class="not-prose text-sm"><div><code><span class="text-yellow-600">git</span> push</code></div></div></div></li> <li><div><div>or revising it:</div> <div class="not-prose text-sm"><div><code><span class="text-yellow-600">git</span> commit -a -amend</code></div></div> <div class="not-prose text-sm"><div><code><span class="text-yellow-600">git</span> push --force</code></div></div></div></li></ul></div></div></div></div>`;return{c(){t=m("div"),t.innerHTML=s,this.h()},l(o){t=h(o,"DIV",{class:!0,"data-svelte-h":!0}),H(t)!=="svelte-1a7ofdu"&&(t.innerHTML=s),this.h()},h(){g(t,"class","prose m-auto my-4 py-4")},m(o,d){c(o,t,d)},p:D,d(o){o&&l(t)}}}function P(v){let t,s=`<h3 id="maintainer">Maintainer Quick Start</h3> <div class="text-sm"><div><div class="prose"><p>pre-requesite: <a href="#prereq">install</a> ngit and git-remote-nostr</p> <h4>1. create a git repo and push to a git server</h4> <div><ul><li><div><div>for example using git commands:</div> <div class="not-prose text-sm"><div><code><span class="text-yellow-600">git</span> init</code></div> <div><code><span class="text-yellow-600">git</span> commit -am &quot;initial
                          commit&quot;</code></div> <div><code><span class="text-green-600">// create repository on git server and the:</span></code></div> <div><code><span class="text-yellow-600">git</span> remote add origin
                          https://dm.co/usr/my-repo.git</code></div> <div><code><span class="text-yellow-600">git</span> push -u origin
                          master</code></div></div></div></li></ul></div> <h4>2. initialize on nostr</h4> <div><ul><li><div><div>initialize:</div> <div class="not-prose text-sm"><div><code><span class="text-purple-600">ngit</span> init</code></div></div></div></li> <li><div><div>use the nostr remote to push state to nostr and git
                      server(s):</div> <div class="not-prose text-sm"><div><code><span class="text-yellow-600">git</span> remote
                          set-url origin nostr://<span class="text-purple-600">npub123</span>/<span class="text-primary">my-repo</span></code></div></div></div></li> <li>ensure all maintainers push to the nostr remote and not git
                  server directly so that state on nostr remains in sync</li></ul></div> <h4>3. view proposals</h4> <div><ul><li><div><div>for open proposals view remote branches with prefix \`pr/\`
                      for example using git command:</div> <div class="not-prose text-sm"><div><code><span class="text-yellow-600">git</span> branch -r --list
                          origin/pr/*</code></div></div></div></li> <li><div><div>OR using ngit with more options such as applying them
                      directly:</div> <div class="not-prose text-sm"><div><code><span class="text-purple-600">ngit</span> list</code></div></div></div></li></ul></div> <h4>4. merge / incorporate proposals</h4> <div><ul><li><div><div>the proposal status will be automatically updated if you
                      merge the branch:</div> <div class="not-prose text-sm"><div><code><span class="text-yellow-600">git</span> checkout master</code></div> <div><code><span class="text-yellow-600">git</span> merge pr/great-feature(e8246b2)</code></div> <div><code><span class="text-yellow-600">git</span> push</code></div></div></div></li> <li><div><div>use gitworkshop.dev to make comments or manually set the
                      status.</div> <div class="not-prose text-sm"><div><code><span class="text-purple-600">ngit</span> list</code></div></div></div></li></ul></div> <h4>5. consider turning off PRs and issues elsewhere</h4> <div><ul><li>ie. on git server(s) so they are managed solely on nostr.</li> <li>Note: for github use <code>Repo Settings &gt; Features</code> for
                  issues but turning off PRs isn&#39;t yet possible.</li></ul></div></div></div></div>`;return{c(){t=m("div"),t.innerHTML=s,this.h()},l(o){t=h(o,"DIV",{class:!0,"data-svelte-h":!0}),H(t)!=="svelte-l8jkzp"&&(t.innerHTML=s),this.h()},h(){g(t,"class","prose m-auto my-4 py-4")},m(o,d){c(o,t,d)},p:D,d(o){o&&l(t)}}}function Q(v){let t,s,o,d,a,u,r,n,p;return s=new R({props:{$$slots:{default:[j]},$$scope:{ctx:v}}}),a=new R({props:{$$slots:{default:[O]},$$scope:{ctx:v}}}),n=new R({props:{$$slots:{default:[P]},$$scope:{ctx:v}}}),{c(){t=$(),_(s.$$.fragment),o=$(),d=m("div"),_(a.$$.fragment),u=$(),r=m("div"),_(n.$$.fragment),this.h()},l(e){z("svelte-bs2zwp",document.head).forEach(l),t=y(e),b(s.$$.fragment,e),o=y(e),d=h(e,"DIV",{class:!0});var f=S(d);b(a.$$.fragment,f),f.forEach(l),u=y(e),r=h(e,"DIV",{class:!0});var x=S(r);b(n.$$.fragment,x),x.forEach(l),this.h()},h(){document.title="GitWorkshop - ngit",g(d,"class","bg-base-300"),g(r,"class","")},m(e,i){c(e,t,i),k(s,e,i),c(e,o,i),c(e,d,i),k(a,d,null),c(e,u,i),c(e,r,i),k(n,r,null),p=!0},p(e,[i]){const f={};i&1&&(f.$$scope={dirty:i,ctx:e}),s.$set(f);const x={};i&1&&(x.$$scope={dirty:i,ctx:e}),a.$set(x);const M={};i&1&&(M.$$scope={dirty:i,ctx:e}),n.$set(M)},i(e){p||(q(s.$$.fragment,e),q(a.$$.fragment,e),q(n.$$.fragment,e),p=!0)},o(e){C(s.$$.fragment,e),C(a.$$.fragment,e),C(n.$$.fragment,e),p=!1},d(e){e&&(l(t),l(o),l(d),l(u),l(r)),I(s,e),I(a),I(n)}}}class A extends E{constructor(t){super(),L(this,t,null,Q,V,{})}}export{A as component};
